---
http_interactions:
- request:
    method: get
    uri: https://api-alpha.work-api.com/email/emails?ids%5B%5D=NWU2MGY3NmI5OWNlNjYwMDA5MzY4OTdiOjE2YjhmZGRhNzZmNTU5ZmU6&ids%5B%5D=NWU2MGY3NmI5OWNlNjYwMDA5MzY4OTdiOjE3MDYzOWUwNTg2ZmNlYjg6
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Authorization:
      - Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1ODU3NTY0NDMsImlhdCI6MTU4MzMzNzI0MywiaXNzIjoiU1BJQ08gQWNjb3VudCIsInVzZXIiOnsiaWQiOiI1ZTRhYmQzYjJjMjgwYTAwMWUzMjFkODgiLCJhcmJpdHJhcnlfaWQiOiJ0ZXN0NDc1NDk5MEB3b3JrLWFwaS5jb20ifX0.3SS3-tLHDZ0oWMlqrHQZV7RIC13c6I9SbPq-YBBschs
      Accept:
      - application/vnd.api+json
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Cowboy
      Connection:
      - keep-alive
      Date:
      - Thu, 05 Mar 2020 14:39:55 GMT
      X-Request-Id:
      - 5880dd50-6e3f-4fe6-bdaf-dec5c032a060
      Content-Type:
      - application/vnd.api+json
      Content-Length:
      - '44123'
      Vary:
      - Origin
      Via:
      - 1.1 vegur
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 05 Mar 2020 14:39:55 GMT
recorded_with: VCR 5.1.0
